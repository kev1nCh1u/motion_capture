from scipy.optimize import fsolve

###################################################################################
# SolvePoint
###################################################################################
class SolvePoint():
    a = []
    b = []
    c = []

    def solve_func(self,unsolve_value):
        x,y,z = unsolve_value[0],unsolve_value[1],unsolve_value[2]

        return [
            (x-self.a[0])**2 + (y-self.a[1])**2 + (z-self.a[2])**2 - 79**2,
            (x-self.b[0])**2 + (y-self.b[1])**2 + (z-self.b[2])**2 - 57**2,
            (x-self.c[0])**2 + (y-self.c[1])**2 + (z-self.c[2])**2 - 82**2,
        ]

    def solve_fsolve(self):
        return fsolve(self.solve_func,[0,0,0])

###################################################################################
# if main
###################################################################################
if __name__ == '__main__':
    sp = SolvePoint()

    sp.a = [14.414906327500171, 22.34505201771049, 449.62576160776894]
    sp.b = [96.13160683183148, 55.10663416683474, 478.5723029681971]
    sp.c = [47.43867422337718, 71.66474800800661, 461.57418427997044]

    ans = sp.solve_fsolve()
    print(ans)